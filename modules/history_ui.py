# -*- coding: utf-8 -*-
"""
modules/history_ui.py ‚Äî –≤–∫–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞–Ω–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è Salem Explorer (PyQt5)

–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç: HistoryPanel (QWidget)
‚Äî –†–∞–±–æ—Ç–∞–µ—Ç —Å—Ç—Ä–æ–≥–æ –∫–∞–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ (–Ω–∏–∫–∞–∫–∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–∫–æ–Ω)
‚Äî –ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏, —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π, –æ—á–∏—Å—Ç–∫–∞, –∏–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç
‚Äî –ú–µ—Ç–æ–¥ add_entry(url, title="") –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
‚Äî –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ (QStandardPaths.AppDataLocation)
"""
from __future__ import annotations

import os
import json
from typing import List, Dict

from PyQt5.QtCore import Qt, QStandardPaths
from PyQt5.QtGui import QPalette, QColor
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QListWidget, QListWidgetItem,
    QPushButton, QLabel, QMessageBox, QFileDialog
)

__all__ = ["HistoryPanel"]


def _history_path() -> str:
    base = QStandardPaths.writableLocation(QStandardPaths.AppDataLocation) or os.getcwd()
    os.makedirs(base, exist_ok=True)
    return os.path.join(base, "salem_history.json")


class HistoryPanel(QWidget):
    """–ü–∞–Ω–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∫ –≤–∫–ª–∞–¥–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞.

    open_callback: callable(url) ‚Äî –µ—Å–ª–∏ –∑–∞–¥–∞–Ω, –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª –Ω–∞–≤–∏–≥–∏—Ä—É–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    """
    def __init__(self, open_callback=None, parent=None):
        super().__init__(parent)
        self.open_callback = open_callback
        self._store_file = _history_path()
        self._history: List[Dict[str, str]] = []
        self._filtered: List[Dict[str, str]] = []
        self._build_ui()
        self._load()

    # ---------------- UI ----------------
    def _build_ui(self) -> None:
        self.setObjectName("HistoryPanel")
        root = QVBoxLayout(self)
        root.setContentsMargins(12, 12, 12, 12)
        root.setSpacing(10)

        # –ü–æ–∏—Å–∫
        self.search = QLineEdit(self)
        self.search.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏‚Ä¶")
        self.search.textChanged.connect(self._refilter)
        root.addWidget(self.search)

        # –°–ø–∏—Å–æ–∫
        self.listw = QListWidget(self)
        root.addWidget(self.listw, 1)
        # –ü—Ä–æ–±–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ viewport —Å–ø–∏—Å–∫–∞ (–Ω–∞ —Å–ª—É—á–∞–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ QSS)
        self.listw.viewport().setStyleSheet("color:#e6e8ee;")

        # –ö–Ω–æ–ø–∫–∏
        bar = QHBoxLayout()
        bar.setSpacing(8)
        self.btn_export = QPushButton("‚¨Ü –≠–∫—Å–ø–æ—Ä—Ç", self)
        self.btn_import = QPushButton("‚¨á –ò–º–ø–æ—Ä—Ç", self)
        self.btn_clear  = QPushButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", self)
        bar.addWidget(self.btn_export)
        bar.addWidget(self.btn_import)
        bar.addStretch(1)
        bar.addWidget(self.btn_clear)
        root.addLayout(bar)

        self.btn_export.clicked.connect(self._export)
        self.btn_import.clicked.connect(self._import)
        self.btn_clear.clicked.connect(self._clear_all)

        # –ê–∫–∫—É—Ä–∞—Ç–Ω–∞—è —Ç—ë–º–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞: –¥–µ–ª–∞–µ–º placeholder —á–∏—Ç–∞–µ–º—ã–º (—Å —Ñ–æ–ª–±—ç–∫–æ–º –¥–ª—è —Å—Ç–∞—Ä—ã—Ö Qt)
        pal = self.search.palette()
        try:
            role = QPalette.PlaceholderText  # Qt >= 5.12
        except AttributeError:
            role = QPalette.Text
        pal.setColor(role, QColor("#8aa0b6"))
        self.search.setPalette(pal)

        # –°—Ç–∏–ª—å (—Ç–µ–º–Ω—ã–π, –±–µ–∑ –Ω–µ–æ–Ω–∞) + –Ø–í–ù–´–ï —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤
        self.setStyleSheet("""
        /* 1) –í–µ—Å—å —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ –ø–∞–Ω–µ–ª–∏ ‚Äî —á–∏—Ç–∞–µ–º—ã–π */
        /* === –ë–∞–∑–æ–≤—ã–π —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç === */
        QWidget { color: #e6e8ee; }              /* —Ç—ë–º–Ω–∞—è —Ç–µ–º–∞ */
         /* –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å #0f172a */
        
        /* === –°–ø–∏—Å–∫–∏ / —Ç–∞–±–ª–∏—Ü—ã / –¥–µ—Ä–µ–≤–æ (–∏—Å—Ç–æ—Ä–∏—è –æ–±—ã—á–Ω–æ —Ç—É—Ç) === */
        QAbstractItemView {
            color: #e6e8ee;
            background: #121826;                 /* —Ñ–æ–Ω —Ç–∞–±–ª–∏—Ü—ã/—Å–ø–∏—Å–∫–∞ */
            selection-background-color: #1f2a44; /* —Ñ–æ–Ω –≤—ã–¥–µ–ª–µ–Ω–∏—è */
            selection-color: #ffffff;            /* —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ */
        }
        QAbstractItemView::item { color: #e6e8ee; }
        QAbstractItemView::item:selected { color: #ffffff; }
        
        /* === –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è === */
        QLineEdit, QTextEdit, QPlainTextEdit {
            color: #e6e8ee;
            background: #0f1117;
            selection-background-color: #1f2a44;
            selection-color: #ffffff;
        }
        
        /* === –ó–∞–≥–æ–ª–æ–≤–∫–∏/—è—Ä–ª—ã–∫–∏/–∫–Ω–æ–ø–∫–∏ === */
        QLabel, QGroupBox, QCheckBox, QRadioButton, QPushButton, QToolButton { color: #e6e8ee; }
        
        /* === –û—Ç–∫–ª—é—á—ë–Ω–Ω—ã–µ (—á—Ç–æ–±—ã –Ω–µ –∏—Å—á–µ–∑–∞–ª–∏) === */
        *:disabled { color: rgba(230,232,238,.45); }
        
        /* === –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–ª—è —Å—Å—ã–ª–æ–∫ –≤ rich-text === */
        QTextBrowser, QLabel[textFormat="RichText"] { color: #8ab4f8; }

        """)

        # –°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –Ω–∞ –≤—Å—é –ø–∞–Ω–µ–ª—å (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∏–ª–∏ —á–∏—Ç–∞—é—Ç –∏–º–µ–Ω–Ω–æ –ø–∞–ª–∏—Ç—Ä—É)
        pal_all = self.palette()
        pal_all.setColor(QPalette.WindowText, QColor("#e6e8ee"))
        pal_all.setColor(QPalette.Text,       QColor("#e6e8ee"))
        pal_all.setColor(QPalette.Highlight,  QColor("#1f2a44"))
        pal_all.setColor(QPalette.HighlightedText, QColor("#ffffff"))
        self.setPalette(pal_all)

    # ---------------- Data I/O ----------------
    def _load(self) -> None:
        try:
            if os.path.isfile(self._store_file):
                with open(self._store_file, "r", encoding="utf-8") as f:
                    self._history = json.load(f) or []
        except Exception:
            self._history = []
        self._refilter()

    def _save(self) -> None:
        try:
            with open(self._store_file, "w", encoding="utf-8") as f:
                json.dump(self._history, f, ensure_ascii=False, indent=2)
        except Exception:
            pass

    # ---------------- Public API ----------------
    def add_entry(self, url: str, title: str = "") -> None:
        if not url:
            return
        # –ø—Ä–æ—Å—Ç–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ URL
        if self._history and self._history[-1].get("url") == url:
            return
        self._history.append({"url": url, "title": title or url})
        self._save()
        self._refilter()

    def set_history(self, rows: List[Dict[str, str]]) -> None:
        self._history = list(rows or [])
        self._save()
        self._refilter()

    # ---------------- Filtering & render ----------------
    def _refilter(self) -> None:
        q = (self.search.text() or "").strip().lower()
        if not q:
            self._filtered = list(self._history)
        else:
            self._filtered = [
                h for h in self._history
                if q in (h.get("url", "").lower() + " " + h.get("title", "").lower())
            ]
        self._render_list()

    def _render_list(self) -> None:
        self.listw.clear()
        # –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—Ä—Ö—É
        for idx, row in enumerate(reversed(self._filtered)):
            url = row.get("url", "")
            title = row.get("title", url)

            wrap = QWidget()
            lay = QHBoxLayout(wrap)
            lay.setContentsMargins(10, 8, 10, 8)
            lay.setSpacing(8)

            lbl = QLabel(
                f"<b>{self._safe_html(title)}</b>"
                f"<br><span style='color:#8aa0b6;font-size:11px'>{self._safe_html(url)}</span>"
            )
            # –ø—Ä–∏–±–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç/–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å/—Ü–≤–µ—Ç –ø—Ä—è–º–æ –Ω–∞ –ª–µ–π–±–ª–µ ‚Äî —Å–∏–ª—å–Ω–µ–µ –ª—é–±–æ–≥–æ –≤–Ω–µ—à–Ω–µ–≥–æ QSS
            lbl.setTextFormat(Qt.RichText)
            lbl.setTextInteractionFlags(Qt.TextSelectableByMouse)
            lbl.setStyleSheet("color:#e6e8ee;")

            btn_open = QPushButton("–û—Ç–∫—Ä—ã—Ç—å")
            btn_del  = QPushButton("–£–¥–∞–ª–∏—Ç—å")
            btn_open.setMaximumWidth(84)
            btn_del.setMaximumWidth(84)

            lay.addWidget(lbl, 1)
            lay.addWidget(btn_open)
            lay.addWidget(btn_del)

            def _go(u=url):
                if callable(self.open_callback):
                    self.open_callback(u)

            # –£–¥–∞–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏/–¥—É–±–ª–∏–∫–∞—Ç–æ–≤: –∏—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ self._history —Å –∫–æ–Ω—Ü–∞
            def _remove(u=url, t=title):
                try:
                    for j in range(len(self._history) - 1, -1, -1):
                        r = self._history[j]
                        if r.get("url") == u and r.get("title", u) == t:
                            self._history.pop(j)
                            break
                    self._save()
                    self._refilter()
                except Exception:
                    pass

            btn_open.clicked.connect(_go)
            btn_del.clicked.connect(_remove)

            it = QListWidgetItem()
            it.setSizeHint(wrap.sizeHint())
            self.listw.addItem(it)
            self.listw.setItemWidget(it, wrap)

    # ---------------- Actions ----------------
    def _clear_all(self) -> None:
        if QMessageBox.question(
            self, "–û—á–∏—Å—Ç–∫–∞", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é?", QMessageBox.Yes | QMessageBox.No
        ) != QMessageBox.Yes:
            return
        self._history.clear()
        self._save()
        self._refilter()

    def _export(self) -> None:
        fname, _ = QFileDialog.getSaveFileName(self, "–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", "history.json", "JSON (*.json)")
        if not fname:
            return
        try:
            with open(fname, "w", encoding="utf-8") as f:
                json.dump(self._history, f, ensure_ascii=False, indent=2)
            QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {e}")

    def _import(self) -> None:
        fname, _ = QFileDialog.getOpenFileName(self, "–ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", "", "JSON (*.json)")
        if not fname:
            return
        try:
            with open(fname, "r", encoding="utf-8") as f:
                data = json.load(f)
            if isinstance(data, list):
                self._history.extend(data)
                self._save()
                self._refilter()
                QMessageBox.information(self, "–ò–º–ø–æ—Ä—Ç", "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ç–æ—Ä–∏—é.")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {e}")

    # ---------------- Utils ----------------
    @staticmethod
    def _safe_html(s: str) -> str:
        return (
            (s or "")
            .replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;")
        )
